name: 배포

on:
  release:
    types: [published]
  
  # 수동 실행 옵션
  workflow_dispatch:
    inputs:
      environment:
        description: '배포 환경'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    name: 배포
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
      
      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: 의존성 설치
        run: npm ci || npm install
        
      - name: 보안 취약점 검사
        run: npm audit --production || echo "취약점이 발견되었지만 배포를 계속합니다."
        
      - name: 환경 변수 설정
        run: |
          if [ "${{ github.event.inputs.environment || 'production' }}" == "production" ]; then
            echo "NODE_ENV=production" >> $GITHUB_ENV
          else
            echo "NODE_ENV=staging" >> $GITHUB_ENV
          fi
          
      - name: 빌드
        run: npm run build
        env:
          NODE_ENV: ${{ env.NODE_ENV }}
      
      # Vercel 배포
      - name: Vercel CLI 설치
        run: npm install -g vercel@latest
      
      - name: Vercel 설정 파일 생성
        run: |
          cat > vercel.json << EOF
          {
            "version": 2,
            "builds": [
              { "src": "dist/**", "use": "@vercel/static" }
            ],
            "routes": [
              { "src": "/(.*)", "dest": "/dist/$1" },
              { "handle": "filesystem" },
              { "src": "/.*", "dest": "/dist/index.html" }
            ]
          }
          EOF
      
      - name: Vercel 배포
        id: vercel-deploy
        run: |
          if [ "${{ github.event.inputs.environment || 'production' }}" == "production" ]; then
            echo "DEPLOY_URL=$(vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }} --yes)" >> $GITHUB_OUTPUT || echo "배포 중 오류가 발생했습니다."
          else
            echo "DEPLOY_URL=$(vercel deploy --token=${{ secrets.VERCEL_TOKEN }} --yes)" >> $GITHUB_OUTPUT || echo "배포 중 오류가 발생했습니다."
          fi
        
      - name: 배포 알림
        uses: rtCamp/action-slack-notify@v2
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: 단지톡 배포 ${{ job.status }}
          SLACK_MESSAGE: |
            환경: ${{ github.event.inputs.environment || 'production' }}
            버전: ${{ github.ref_name }}
            배포자: ${{ github.actor }}
            상태: ${{ job.status }}
            URL: ${{ steps.vercel-deploy.outputs.DEPLOY_URL || 'URL을 가져올 수 없습니다.' }} 